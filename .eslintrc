{
  // Configuration for JavaScript files
  "extends": [
    "next/core-web-vitals", // Needed to avoid warning in next.js build: 'The Next.js plugin was not detected in your ESLint configuration'
    "eslint:recommended", // Eslint recommended configuration by eslint.
    "plugin:import/recommended", // Linting of ES2015+ import/export syntax.
    "plugin:react/recommended", // Recommended react linting configs.
    "plugin:react-hooks/recommended", // Recommended react hooks linting configs.
    "plugin:jsx-a11y/recommended", // Turns on a11y rules for JSX.
    "plugin:prettier/recommended" // Turns off all rules that are unnecessary or might conflict with Prettier.
  ],
  "rules": {
    "prettier/prettier": [
      "error",
      {
        "jsxSingleQuote": true,
        "singleQuote": true,
        "semi": true,
        "tabWidth": 2,
        "trailingComma": "all",
        "printWidth": 100,
        "bracketSameLine": false,
        "useTabs": false,
        "arrowParens": "always",
        "endOfLine": "auto"
      }
    ]
  },
  "overrides": [
    // Configuration for TypeScript files
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "extends": [
        "next/core-web-vitals", // Needed to avoid warning in next.js build: 'The Next.js plugin was not detected in your ESLint configuration'
        "eslint:recommended", // Eslint recommended configuration by eslint.
        "plugin:import/recommended", // Linting of ES2015+ import/export syntax.
        "plugin:react/recommended", // Recommended react linting configs.
        "plugin:react-hooks/recommended", // Recommended react hooks linting configs.
        "plugin:jsx-a11y/recommended", // Turns on a11y rules for JSX.
        "plugin:@typescript-eslint/recommended", // Turns on rules from TypeScript-specific plugin.
        "plugin:prettier/recommended" // Turns off all rules that are unnecessary or might conflict with Prettier.
      ],
      "plugins": [
        "react",
        "react-hooks",
        "jsx-a11y",
        "@typescript-eslint",
        "import", // Support linting for import/export syntax
        "simple-import-sort", // Plugin for sorting imports in file.
        "unused-imports" // Plugin for removing unused imports
      ],
      "parser": "@typescript-eslint/parser", // Allows Eslint to understand TypeScript syntax.
      "parserOptions": {
        "project": "./tsconfig.json", // Specify where to find the root tsconfig file of your project.
        "ecmaVersion": 2021, // ECMAScript version supported in the project.
        "sourceType": "module", // set to `module` because we ue ECMAScript modules.
        "ecmaFeatures": {
          "jsx": true // enable jsx for React.
        }
      },
      "rules": {
        "import/first": "warn",
        "import/newline-after-import": "warn",
        "import/no-duplicates": "error",
        "import/no-named-as-default-member": "off",
        "react/prop-types": "off",
        "react/react-in-jsx-scope": "off",
        "react/jsx-sort-props": [
          "warn",
          {
            "callbacksLast": true,
            "shorthandFirst": true,
            "ignoreCase": true,
            "reservedFirst": true,
            "noSortAlphabetically": true
          }
        ],
        "react/destructuring-assignment": "off", // Vscode doesn't support automatically destructuring, it's a pain to add a new variable
        "jsx-a11y/anchor-is-valid": "off", // Next.js use his own internal link system
        "react/require-default-props": "off", // Allow non-defined react props as undefined
        "react/jsx-props-no-spreading": "off", // _app.tsx uses spread operator and also, react-hook-form
        "react-hooks/exhaustive-deps": "off", // Incorrectly report needed dependency with Next.js router
        "@next/next/no-img-element": "off", // We currently not using next/image because it isn't supported with SSG mode
        "@typescript-eslint/comma-dangle": "off", // Avoid conflict rule between Eslint and Prettier
        "@typescript-eslint/consistent-type-imports": "error", // Ensure `import type` is used when it's necessary
        "import/prefer-default-export": "off", // Named export is easier to refactor automatically
        "simple-import-sort/imports": "warn", // Import configuration for `eslint-plugin-simple-import-sort`
        "simple-import-sort/exports": "warn", // Export configuration for `eslint-plugin-simple-import-sort`
        "@typescript-eslint/no-unused-vars": "off",
        "unused-imports/no-unused-imports": "error",
        "unused-imports/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
        "no-restricted-imports": "off",
        "@typescript-eslint/no-restricted-imports": "warn"
      },
      "settings": {
        "react": {
          "version": "detect" // auto-detect React version from package.json.
        },
        "import/parsers": {
          "@typescript-eslint/parser": [".ts", ".tsx"] // use typescript-eslint parser for .ts|tsx files.
        },
        "import/resolver": {
          "typescript": {
            "project": "./tsconfig.json",
            "alwaysTryTypes": true // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`.
          }
        }
      }
    },
    // Configuration for testing
    {
      "files": ["**/*.test.ts", "**/*.test.tsx"],
      "plugins": ["jest", "jest-formatting", "testing-library", "jest-dom"],
      "extends": [
        "plugin:jest/recommended",
        "plugin:jest-formatting/recommended",
        "plugin:testing-library/react",
        "plugin:jest-dom/recommended"
      ]
    },
    // Configuration for e2e testing (Cypress)
    {
      "files": ["**/*.cy.ts"],
      "plugins": ["cypress"],
      "extends": ["plugin:cypress/recommended"],
      "parserOptions": {
        "project": "./cypress/tsconfig.json"
      }
    }
  ]
}
